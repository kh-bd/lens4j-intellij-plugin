import org.jetbrains.intellij.platform.gradle.TestFrameworkType

plugins {
    id 'java'
    id "io.freefair.lombok" version "6.2.0"
    id 'org.jetbrains.intellij.platform' version '2.6.0'
}

group 'dev.khbd.lens4j'
version baseVersion() + "_" + intellijVersion()

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

repositories {
    mavenCentral()

    intellijPlatform {
        defaultRepositories()
    }
}

dependencies {
    implementation group: 'dev.khbd.lens4j', name: 'lens4j-core', version: lens4j_version

    compileOnly group: 'dev.khbd.interp4j', name: 'interp4j-core', version: interp4j_version
    annotationProcessor group: 'dev.khbd.interp4j', name: 'interp4j-processor', version: interp4j_version
    testAnnotationProcessor group: 'dev.khbd.interp4j', name: 'interp4j-processor', version: interp4j_version

    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.11.0-M2'
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: '5.11.0-M2'
    testImplementation group: 'org.assertj', name: 'assertj-core', version: '3.9.0'

    intellijPlatform {
        intellijIdeaCommunity(intellijVersion())

        bundledPlugin "com.intellij.java"

        testFramework TestFrameworkType.Platform.INSTANCE
    }
}

// configure interp4j plugin
tasks.withType(JavaCompile) {
    options.fork = true
    options.compilerArgs.add('-Xplugin:interp4j interpolation.inlined=true')
    options.forkOptions.jvmArgs.addAll([
            '--add-exports', 'jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED',
            '--add-exports', 'jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED',
            '--add-exports', 'jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED',
            '--add-exports', 'jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED'
    ])
}

def intellijVersion() {
    System.getenv().getOrDefault('INTELLIJ_VERSION', intellij_version)
}

def baseVersion() {
    System.getenv().getOrDefault('BASE_VERSION', base_version)
}

publishPlugin {
    token = System.getenv("INTELLIJ_PUBLISH_TOKEN")
}

def loadHtml(String fileName) {
    file(fileName).text.replace('<html>', '').replace('</html>', '')
}

patchPluginXml {
    changeNotes = loadHtml("change-notes.html")
    pluginDescription = loadHtml("description.html")
}

task libs(type: Sync) {
    from configurations.compileClasspath
    into "$buildDir/lib"
    include 'lens4j-core-' + lens4j_version + '.jar'
    rename 'lens4j-core-' + lens4j_version, 'lens4j'
}

test.dependsOn(libs)

test {
    testLogging {
        exceptionFormat = 'full'
    }
    useTestNG()
}
